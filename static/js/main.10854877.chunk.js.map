{"version":3,"sources":["Services/file.service.js","Components/loading.jsx","Components/Portal/Portal.jsx","Components/Download/DownloadPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","require","axiosConfig","baseURL","process","headers","common","Accept","downloadFile","fileName","method","url","then","response","data","catch","error","console","log","LoadingPage","props","useState","loading","setLoading","useEffect","style","width","height","position","zIndex","backgroundColor","top","left","marginLeft","marginTop","type","color","prototype","propTypes","bool","PortalPage","alphaStrings","setAlphaStrings","realNumbers","setRealNumbers","integers","setIntegers","alphaNumerics","setAlphaNumerics","linkFile","setLinkFile","setFileName","className","onClick","window","location","href","name","realNumberList","alphabeticalList","integerList","alphaNumericList","target","link","document","createElement","escape","download","click","length","DownloadPage","content","setContent","hash","split","App","path","exact","Portal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10854877.chunk.js","sourcesContent":["const axios = require(\"axios\");\n\nconst axiosConfig = {\n    baseURL: process.env.REACT_APP_API_ENDPOINT,\n    headers: {\n        common: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n        }\n    }\n}\n\nexport function generateRandomObjectsFile() {\n    return axios({\n        method: \"put\",\n        url: `${process.env.REACT_APP_API_ENDPOINT}/uploads`,\n        ...axiosConfig\n    })\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => {\n            console.log(error);\n            throw error;\n        });\n}\n\nexport function downloadFile(fileName) {\n    return axios({\n        method: \"get\",\n        url: `${process.env.REACT_APP_API_ENDPOINT}/uploads/${fileName}`,\n        ...axiosConfig\n    })\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => {\n            console.log(error);\n            throw error;\n        });\n}","import React, { useState, useEffect } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport propTypes from \"prop-types\";\n\nconst LoadingPage = (props) => {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(props.loading);\n  }, [props.loading]);\n\n  return (\n    <div>\n      {loading && (\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            position: \"absolute\",\n            zIndex: \"10000\",\n            backgroundColor: \"rgb(0,0,0,0.5)\",\n            top: 0,\n            left: 0\n          }}\n        >\n          <div style={{ marginLeft: \"45%\", marginTop: \"10%\" }}>\n            <ReactLoading\n              type={\"bars\"}\n              color={\"white\"}\n              height={\"20%\"}\n              width={\"20%\"}\n            />\n            <h3 style={{ marginLeft: \"-7%\", color: \"white\" }}>\n              Loading please wait...\n            </h3>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nLoadingPage.prototype = {\n  loading: propTypes.bool,\n};\nexport default LoadingPage;\n","import React, { useState } from \"react\";\nimport {\n  generateRandomObjectsFile,\n  downloadFile,\n} from \"../../Services/file.service\";\nimport LoadingPage from \"../loading\";\n\nconst PortalPage = (props) => {\n  const [alphaStrings, setAlphaStrings] = useState([]);\n  const [realNumbers, setRealNumbers] = useState([]);\n  const [integers, setIntegers] = useState([]);\n  const [alphaNumerics, setAlphaNumerics] = useState([]);\n  const [linkFile, setLinkFile] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  /**\n   * Action on generate file\n   */\n  const onGenerateFile = () => {\n    setLoading(true);\n    generateRandomObjectsFile().then((response) => {\n      if (response.data) {\n        setLoading(false);\n        setLinkFile(`${window.location.href}${response.data.href}`);\n        setFileName(response.data.name);\n        setRealNumbers(response.data.realNumberList);\n        setAlphaStrings(response.data.alphabeticalList);\n        setIntegers(response.data.integerList);\n        setAlphaNumerics(response.data.alphaNumericList);\n      }\n    });\n  };\n\n  /**\n   * Action on export file\n   */\n  const onExportFile = () => {\n    setLoading(true);\n    downloadFile(fileName).then((response) => {\n      setLoading(false);\n      var link = document.createElement(\"a\");\n      link.href = \"data:text/plain;charset=UTF-8,\" + escape(response);\n      link.download = fileName;\n      link.click();\n    });\n  };\n\n  return (\n    <div>\n      <LoadingPage loading={loading} />\n      <div className=\"row\">\n        <button onClick={onGenerateFile}>Generate</button>\n      </div>\n      <div className=\"row\">\n        <label>Link: </label>\n        <a href={linkFile} target=\"_blank\">\n          {linkFile}\n        </a>\n      </div>\n      <div className=\"row\">\n        <button onClick={onExportFile}>Report</button>\n      </div>\n      <div className=\"row\">\n        <div>\n          <label>Alphabetical strings: {alphaStrings.length}</label>\n        </div>\n        <div>\n          <label>Real numbers: {realNumbers.length}</label>\n        </div>\n        <div>\n          <label>Integers: {integers.length}</label>\n        </div>\n        <div>\n          <label>Alphanumerics: {alphaNumerics.length}</label>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default PortalPage;\n","import React, { useEffect, useState } from \"react\";\nimport { downloadFile } from \"../../Services/file.service\";\n\nconst DownloadPage = (props) => {\n  const [content, setContent] = useState(\"\");\n\n  useEffect(() => {\n    let fileName = window.location.hash.split(\"/uploads/\")[1];\n    downloadFile(fileName).then((response) => {\n      var link = document.createElement(\"a\");\n      link.href = \"data:text/plain;charset=UTF-8,\" + escape(response);\n      link.download = fileName;\n      link.click();\n      setContent(response);\n    });\n  }, []);\n\n  return <div>{content}</div>;\n};\nexport default DownloadPage;\n","import './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport PortalPage from './Components/Portal/Portal';\nimport DownloadPage from './Components/Download/DownloadPage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container App\">\n        <Switch>\n          <Route path=\"/uploads\">\n            <DownloadPage />\n          </Route>\n          <Route exact path=\"/\">\n            <PortalPage />\n          </Route>\n          <Route>\n            <div>\n              Page not found\n            </div>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}